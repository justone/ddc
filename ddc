#!/usr/bin/perl

use strict;
use warnings;
use English qw( -no_match_vars );    # Avoids regex performance penalty
use Getopt::Long;
use Pod::Usage;

our $VERSION = '0.1';

my %opts;
my $dockerfile_base;

my $command_aliases = { 'ls' => 'list', };

my $commands = {
    'create' => sub {
        INFO("Nothing yet...");
    },
    'destroy' => sub {
        my $argv = shift;

        # GetOptionsFromArray( $argv, \%opts, 'no-fetch' );

        INFO("Nothing yet...");
    },
    'run' => sub {
        my $argv = shift;

        # GetOptionsFromArray( $argv, \%opts, 'merge', 'rebase' );

        INFO("Nothing yet...");
    },
    'list' => sub {
        my $argv = shift;

        # GetOptionsFromArray( $argv, \%opts, 'merge', 'no-fetch' );

        INFO("Nothing yet...");
    },
    'connect' => sub {
        my $argv = shift;

        INFO("Nothing yet...");
    },
    'help' => sub {
        my $argv = shift;

        my $command = shift @$argv;

        if ($command) {
            $command = $command_aliases->{$command} || $command;

            my %options = (
                -verbose    => 99,
                -exitstatus => 0,
                -sections   => uc($command),
            );

            pod2usage(%options);
        }
        else {
            pod2usage(2);
        }
    },
};

run_ddc( @ARGV ) unless defined caller;

sub run_ddc {
    my ( @argv ) = @_;

    # set options to nothing so that running multiple times in tests
    # does not reuse options
    %opts = ();

    my $command;

    if ( scalar(@argv) == 0 || $argv[0] =~ /^-/ ) {

       # check to make sure there's not a ddc subcommand later in the arg list
        if ( grep { exists $commands->{$_} } @argv ) {
            ERROR("The command should be first.");
            exit(-2);
        }
        $command = 'help';
    }
    else {
        $command = $argv[0];
    }

    $command = $command_aliases->{$command} || $command;

    if ( exists $commands->{$command} ) {

        # parse global options first
        Getopt::Long::Configure('pass_through');
        GetOptionsFromArray(
            \@argv,    \%opts, 'verbose', 'quiet',
            'dry-run', 'help', 'version'
        );
        Getopt::Long::Configure('no_pass_through');
    }

    # get dockerfile dir
    $dockerfile_base = $ENV{DDC_DOCKERFILES};
    if (! $dockerfile_base) {
        ERROR("Please specify the base directory for Dockerfiles with the DDC_DOCKERFILES environment variable.");
        exit(-2);
    }

    if ( exists $commands->{$command} ) {
        if ( $opts{'help'} ) {
            $commands->{'help'}->( [$command] );
        }
        elsif ( $opts{'version'} ) {
            show_version();
        }
        else {
            shift(@argv);    # remove the command from the array
            $commands->{$command}->( \@argv );
        }
    }
}

# a few log4perl-alikes
sub ERROR {
    printf "ERROR: %s\n", shift;
}

sub WARN {
    printf "WARN: %s\n", shift;
}

sub INFO {
    printf "INFO: %s\n", shift if !$opts{quiet};
}

sub DEBUG {
    printf "DEBUG: %s\n", shift if $opts{verbose};
}

sub show_version {
    print "ddc version $VERSION\n";
}

# work-alike for function from perl 5.8.9 and later
# added for compatibility with CentOS 5, which is stuck on 5.8.8
sub GetOptionsFromArray {
    my ( $argv, $opts, @options ) = @_;

    local @ARGV = @$argv;
    GetOptions( $opts, @options );

    # update the passed argv array
    @$argv = @ARGV;
}

1;

__END__

=head1 NAME

    ddc - A script to manage a dotfiles repository

=head1 SYNOPSIS

usage: ddc <command> [--version] [--dry-run] [--verbose] [--quiet] [<args>]

The commands are:

   create     Create an environment
   destroy    Destroy an environment
   run        Create and connect to an environment
   connect    Connect to an environment
   list       List environments

See 'ddc help <command>' for more information on a specific command.

=head1 DESCRIPTION

    Manages docker dev containers.

=head1 COMMON OPTIONS

All the subcommands implemented by ddc have the following options:

  --verbose     Show extra information about what ddc is doing
  --quiet       Show as little info as possible.
  --dry-run     Don't do anything.
  --version     Print version information.

=head1 HELP

All Options:

  ddc help <subcommand>
  ddc <subcommand> --help

Examples:

  ddc install --help
  ddc help install

Description:

This shows the help for a particular subcommand.

=head1 CREATE

All Options:

  ddc create <name> --type <env type> [--verbose|--quiet] [--dry-run]

Examples:

  ddc create proj1 --type go

Description:

This will create a new environment.

=head1 DESTROY

All Options:

  ddc destroy <name> [--verbose|--quiet] [--dry-run]

Examples:

  ddc destroy proj1
  ddc destroy proj1 --dry-run

Description:

This will destroy the environment specified.

=head1 RUN

All Options:

  ddc run <name> --type <env type> [--verbose|--quiet] [--dry-run]

Examples:

  ddc run proj1 --type go

Description:

This will create and then connect to an environment.

=head1 CONNECT

All Options:

  ddc run <name> [--verbose|--quiet] [--dry-run]

Examples:

  ddc connect proj1

Description:

This will connect to an environment.

=head1 LIST

All Options:

  ddc list [--verbose|--quiet] [--dry-run]

Examples:

  ddc list

Description:

This will list environments.

=head1 AUTHOR

Nate Jones <nate@endot.org>

=head1 COPYRIGHT

Copyright (c) 2015 L</AUTHOR> as listed above.

=head1 LICENSE

This program is free software distributed under the Apache License, Version 2.0.

=cut
