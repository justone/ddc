#!/usr/bin/perl

use strict;
use warnings;
use English qw( -no_match_vars );    # Avoids regex performance penalty
use Getopt::Long;
use File::Spec;
use File::Copy;
use File::Path;
use Pod::Usage;

our $VERSION = '0.1';

my %opts;
my $dockerfile_base;
my $env_base = "$ENV{HOME}/envs";

# TODO: allow specifying these
my $user        = $ENV{'USER'};
my $docker_user = $user;

my $command_aliases = { 'ls' => 'list', 'rm' => 'destroy', };

my $commands;
$commands = {
    'create' => sub {
        my $argv = shift;

        GetOptionsFromArray( $argv, \%opts, 'type|t=s', 'directory|d=s' );
        my ($env_name) = @$argv;
        if ( !$env_name ) {
            ERROR("Specify name of environment.");
            exit(-2);
        }

        my $project_directory = $opts{directory} || $ENV{PWD};

        my $type = $opts{type};
        if ( !$type ) {
            ERROR("Specify type of environment with the --type option.");
            exit(-2);
        }

        create_env( $env_name, $type, $project_directory );
    },
    'destroy' => sub {
        my $argv = shift;

        my ($env_name) = @$argv;
        if ( !$env_name ) {
            ERROR("Specify name of environment.");
            exit(-2);
        }

        destroy_env($env_name);
    },
    'run' => sub {
        my $argv = shift;

        Getopt::Long::Configure('pass_through');
        GetOptionsFromArray( $argv, \%opts, 'rm|r' );
        Getopt::Long::Configure('no_pass_through');

        $commands->{'create'}->($argv);
        $commands->{'connect'}->($argv);
        if ( $opts{rm} ) {
            $commands->{'destroy'}->($argv);
        }
    },
    'list' => sub {
        list_envs();
    },
    'stop' => sub {
        my $argv = shift;

        GetOptionsFromArray( $argv, \%opts, 'all|a' );

        if ( $opts{all} ) {
            stop_all_envs();
        }
        else {
            my ($env_name) = @$argv;
            if ( !$env_name ) {
                ERROR("Specify name of environment.");
                exit(-2);
            }

            stop_env($env_name);
        }
    },
    'start' => sub {
        my $argv = shift;

        GetOptionsFromArray( $argv, \%opts, 'all|a' );

        if ( $opts{all} ) {
            start_all_envs();
        }
        else {
            my ($env_name) = @$argv;
            if ( !$env_name ) {
                ERROR("Specify name of environment.");
                exit(-2);
            }

            start_env($env_name);
        }
    },
    'connect' => sub {
        my $argv = shift;

        my ($env_name) = @$argv;
        if ( !$env_name ) {
            ERROR("Specify name of environment.");
            exit(-2);
        }

        connect_env($env_name);
    },
    'help' => sub {
        my $argv = shift;

        my ($command) = @$argv;

        if ($command) {
            $command = $command_aliases->{$command} || $command;

            my %options = (
                -verbose    => 99,
                -exitstatus => 0,
                -sections   => uc($command),
            );

            pod2usage(%options);
        }
        else {
            pod2usage(2);
        }
    },
};

run_ddc(@ARGV) unless defined caller;

sub run_ddc {
    my (@argv) = @_;

    # set options to nothing so that running multiple times in tests
    # does not reuse options
    %opts = ();

    my $command;

    if ( scalar(@argv) == 0 || $argv[0] =~ /^-/ ) {

       # check to make sure there's not a ddc subcommand later in the arg list
        if ( grep { exists $commands->{$_} } @argv ) {
            ERROR("The command should be first.");
            exit(-2);
        }
        $command = 'help';
    }
    else {
        $command = $argv[0];
    }

    $command = $command_aliases->{$command} || $command;

    if ( exists $commands->{$command} ) {

        # parse global options first
        Getopt::Long::Configure('pass_through');
        GetOptionsFromArray(
            \@argv,    \%opts, 'verbose', 'quiet',
            'dry-run', 'help', 'version'
        );
        Getopt::Long::Configure('no_pass_through');
    }

    # get dockerfile dir
    $dockerfile_base = $ENV{DDC_DOCKERFILES};
    if ( !$dockerfile_base ) {
        ERROR(
            "Please specify the base directory for Dockerfiles with the DDC_DOCKERFILES environment variable."
        );
        exit(-2);
    }

    if ( exists $commands->{$command} ) {
        if ( $opts{'help'} ) {
            $commands->{'help'}->( [$command] );
        }
        elsif ( $opts{'version'} ) {
            show_version();
        }
        else {
            shift(@argv);    # remove the command from the array
            $commands->{$command}->( \@argv );
        }
    }
}

sub create_env {
    my ( $env_name, $type, $project_dir ) = @_;

    my ( $priv, $pub ) = ensure_ssh_key();

    my $existing = load_existing();
    if ( $existing->{$env_name} ) {
        ERROR("Environment $env_name already exists.");
        exit(-2);
    }

    ensure_image($type);
    my (@elements) = File::Spec->splitdir($project_dir);
    my $topmost_pathpart = pop @elements;

    my $env_dir = "$env_base/$env_name";
    mkpath($env_dir);
    mkpath( "$env_dir/.ssh", 0, 0700 );
    copy( $pub, "$env_dir/.ssh/authorized_keys" );

    my $image_name = "$docker_user/${type}dev:latest";
    my $cmd
        = "docker run -d -p 22 --name ddc_$env_name -v $env_dir:/home/$user -v $ENV{PWD}:/home/$user/$topmost_pathpart --hostname $env_name $image_name";
    DEBUG($cmd);
    `$cmd`;
}

sub ensure_ssh_key {
    if ( !-e "$ENV{HOME}/.ssh/ddc_key" ) {
        INFO("Creating internal ssh-key");
        `ssh-keygen -q -t rsa -N '' -C 'ddc key' -f $ENV{HOME}/.ssh/ddc_key`;
    }

    return ( "$ENV{HOME}/.ssh/ddc_key", "$ENV{HOME}/.ssh/ddc_key.pub" );
}

sub ensure_image {

    # TODO: implement
}

sub load_existing {

    if ( !-e $env_base ) {
        mkdir $env_base
    }

    my @docker_ps_output = split( /\n/, `docker ps -a` );
    my $containers;
    foreach my $docker_line (@docker_ps_output) {
        next if $docker_line =~ m/COMMAND/;
        my @elements = split( /\s\s+/, $docker_line );
        my $name;
        my $ports;
        if ( scalar @elements == 7 ) {
            $name  = $elements[6];
            $ports = $elements[5];
        }
        if ( scalar @elements == 6 ) {
            $name  = $elements[5];
            $ports = $elements[4];
        }
        if ($name) {
            $containers->{$name}{running}   = $elements[4] =~ m/Up/ ? 1 : 0;
            $containers->{$name}{image}     = $elements[1];
            $containers->{$name}{container} = $elements[0];

            foreach my $ip_port ( split( /, /, $ports ) ) {

                # 0.0.0.0:32772->22/tcp
                if ( my ( $ext_bind, $ext_port, $int_port )
                    = $ip_port =~ m/([\d.]+):(\d+)->(\d+)\/(tcp|udp)/ )
                {
                    $containers->{$name}{ports}{$int_port} = {
                        port => $ext_port,
                        bind => $ext_bind,
                    };
                }
            }

        }
    }

    # print STDERR Dumper($containers); use Data::Dumper;

    my $existing_envs = {};
    opendir( DIR, $env_base ) or die $!;
    my @dirs = grep { $_ ne '.' && $_ ne '..' } readdir(DIR);
    foreach my $env_dir (@dirs) {

        # print "$env_dir\n";

        my $container = $containers->{"ddc_$env_dir"};
        $existing_envs->{$env_dir} = { container => $container };

        if ($container) {
            my $image = $container->{image};
            my ($type) = $image =~ m/$docker_user\/(.+)dev:latest/;
            $existing_envs->{$env_dir}{type} = $type;
        }
    }

    return $existing_envs;
}

sub list_envs {
    my $existing = load_existing();
    foreach my $env ( keys %$existing ) {
        print $env;

        if ( my $type = $existing->{$env}{type} ) {
            print " [type: $type]";
        }
        if ( my $container = $existing->{$env}{container} ) {

            if ( $container->{running} ) {
                print " [running]";
            }
            else {
                print " [stopped]";
            }
        }
        else {
            print " [no container]";
        }

        print "\n";
    }
}

sub connect_env {
    my ($env_name) = @_;

    start_env($env_name);

    my ( $priv, $pub ) = ensure_ssh_key();

    my $existing = load_existing();
    if ( !$existing->{$env_name} ) {
        ERROR("Environment $env_name does not exist.");
        exit(-2);
    }

    my @cmd = (
        qw(ssh -A localhost -p),
        $existing->{$env_name}{container}{ports}{22}{port},
        '-i',
        $priv,
        '-o',
        'UserKnownHostsFile /dev/null',
        '-o',
        'StrictHostKeyChecking no'
    );
    system @cmd;
}

sub stop_env {
    my ($env_name) = @_;

    my $existing = load_existing();
    if ( !$existing->{$env_name} ) {
        ERROR("Environment $env_name does not exist.");
        exit(-2);
    }

    if ( defined( $existing->{$env_name}{container} )
        && $existing->{$env_name}{container}{running} )
    {
        my $cmd = "docker stop ddc_$env_name";
        DEBUG($cmd);
        `$cmd`;
    }
}

sub stop_all_envs {
    my $existing = load_existing();
    foreach my $env ( keys %$existing ) {
        if ( defined( $existing->{$env}{container} )
            && $existing->{$env}{container}{running} )
        {
            my $cmd = "docker stop ddc_$env";
            DEBUG($cmd);
            `$cmd`;
        }
    }
}

sub start_env {
    my ($env_name) = @_;

    my $existing = load_existing();
    if ( !$existing->{$env_name} ) {
        ERROR("Environment $env_name does not exist.");
        exit(-2);
    }

    if ( defined( $existing->{$env_name}{container} )
        && !$existing->{$env_name}{container}{running} )
    {
        my $cmd = "docker start ddc_$env_name";
        DEBUG($cmd);
        `$cmd`;
    }
}

sub start_all_envs {
    my $existing = load_existing();
    foreach my $env ( keys %$existing ) {
        if ( defined( $existing->{$env}{container} )
            && !$existing->{$env}{container}{running} )
        {
            my $cmd = "docker start ddc_$env";
            DEBUG($cmd);
            `$cmd`;
        }
    }
}

sub destroy_env {
    my ($env_name) = @_;

    stop_env($env_name);

    my $existing = load_existing();
    if ( !$existing->{$env_name} ) {
        ERROR("Environment $env_name does not exist.");
        exit(-2);
    }

    if ( defined( $existing->{$env_name}{container} ) ) {
        my $cmd = "docker rm ddc_$env_name";
        DEBUG($cmd);
        `$cmd`;
    }

    my $env_dir = "$env_base/$env_name";
    if ( -e $env_dir ) {
        rmtree($env_dir)
    }
}

# a few log4perl-alikes
sub ERROR {
    printf "ERROR: %s\n", shift;
}

sub WARN {
    printf "WARN: %s\n", shift;
}

sub INFO {
    printf "INFO: %s\n", shift if !$opts{quiet};
}

sub DEBUG {
    printf "DEBUG: %s\n", shift if $opts{verbose};
}

sub show_version {
    print "ddc version $VERSION\n";
}

# work-alike for function from perl 5.8.9 and later
# added for compatibility with CentOS 5, which is stuck on 5.8.8
sub GetOptionsFromArray {
    my ( $argv, $opts, @options ) = @_;

    local @ARGV = @$argv;
    GetOptions( $opts, @options );

    # update the passed argv array
    @$argv = @ARGV;
}

1;

__END__

=head1 NAME

    ddc - A script to manage a dotfiles repository

=head1 SYNOPSIS

usage: ddc <command> [--version] [--dry-run] [--verbose] [--quiet] [<args>]

The commands are:

   create     Create an environment
   destroy    Destroy an environment
   run        Create and connect to an environment
   connect    Connect to an environment
   list       List environments

See 'ddc help <command>' for more information on a specific command.

=head1 DESCRIPTION

    Manages docker dev containers.

=head1 COMMON OPTIONS

All the subcommands implemented by ddc have the following options:

  --verbose     Show extra information about what ddc is doing
  --quiet       Show as little info as possible.
  --dry-run     Don't do anything.
  --version     Print version information.

=head1 HELP

All Options:

  ddc help <subcommand>
  ddc <subcommand> --help

Examples:

  ddc install --help
  ddc help install

Description:

This shows the help for a particular subcommand.

=head1 CREATE

All Options:

  ddc create <name> --type <env type> [--verbose|--quiet] [--dry-run]

Examples:

  ddc create proj1 --type go

Description:

This will create a new environment.

=head1 DESTROY

All Options:

  ddc destroy <name> [--verbose|--quiet] [--dry-run]

Examples:

  ddc destroy proj1
  ddc destroy proj1 --dry-run

Description:

This will destroy the environment specified.

=head1 RUN

All Options:

  ddc run <name> --type <env type> [--verbose|--quiet] [--dry-run]

Examples:

  ddc run proj1 --type go

Description:

This will create and then connect to an environment.

=head1 CONNECT

All Options:

  ddc run <name> [--verbose|--quiet] [--dry-run]

Examples:

  ddc connect proj1

Description:

This will connect to an environment.

=head1 LIST

All Options:

  ddc list [--verbose|--quiet] [--dry-run]

Examples:

  ddc list

Description:

This will list environments.

=head1 STOP

All Options:

  ddc stop <name> [--verbose|--quiet] [--dry-run]
  ddc stop --all [--verbose|--quiet] [--dry-run]

Examples:

  ddc stop proj1
  ddc stop --all

Description:

This will stop a particular environment, or all environments.

=head1 START

All Options:

  ddc start <name> [--verbose|--quiet] [--dry-run]
  ddc start --all [--verbose|--quiet] [--dry-run]

Examples:

  ddc start proj1
  ddc start --all

Description:

This will start a particular environment, or all environments.

=head1 AUTHOR

Nate Jones <nate@endot.org>

=head1 COPYRIGHT

Copyright (c) 2015 L</AUTHOR> as listed above.

=head1 LICENSE

This program is free software distributed under the Apache License, Version 2.0.

=cut
